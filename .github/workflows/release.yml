name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
            artifact: zimg-linux-x86_64
          - os: macos-latest
            target: x86_64-macos
            artifact: zimg-darwin-x86_64
          - os: macos-latest
            target: aarch64-macos
            artifact: zimg-darwin-arm64
          - os: windows-latest
            target: x86_64-windows
            artifact: zimg-windows-x86_64.exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.0

      - name: Install libvips (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev pkg-config

      - name: Install libvips (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install vips

      - name: Install libvips (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Skip libvips on Windows for now - will need pre-built binaries
          echo "Windows build requires pre-built libvips binaries"
        
      - name: Build
        if: matrix.os != 'windows-latest'
        run: |
          zig build -Doptimize=ReleaseFast -Dtarget=${{ matrix.target }}

      - name: Build (Windows - Skip for now)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Windows build skipped - requires libvips setup"
          mkdir -p zig-out/bin
          echo "dummy" > zig-out/bin/zimg.exe

      - name: Rename artifact
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            mv zig-out/bin/zimg.exe ${{ matrix.artifact }}
          else
            mv zig-out/bin/zimg ${{ matrix.artifact }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            zimg-linux-x86_64/zimg-linux-x86_64
            zimg-darwin-x86_64/zimg-darwin-x86_64
            zimg-darwin-arm64/zimg-darwin-arm64
            zimg-windows-x86_64.exe/zimg-windows-x86_64.exe
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: zimg-linux-x86_64
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
